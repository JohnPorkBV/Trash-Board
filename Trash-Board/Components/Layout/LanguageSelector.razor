@using System.Globalization
@using TrashBoard.Services
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject CustomLocalizer<TrashDetectionsLineChart> LineChart
@inject CustomLocalizer<TrashTypeBarChart> BarChart
@inject CustomLocalizer<Selector> Selector
@inject CustomLocalizer<AboutUs> About
@inject CustomLocalizer<AiPrediction> AiPrediction
@rendermode InteractiveServer

<select @onchange="OnLanguageChange" class="form-select w-auto">
    <option value="nl" selected="@IsSelected("nl")">Nederlands</option>
    <option value="en" selected="@IsSelected("en")">English</option>
    <option value="de" selected="@IsSelected("de")">Deutsch</option>
    <option value="braille" selected="@IsSelected("braille")">Braille</option>
    <option value="emoji" selected="@IsSelected("emoji")">Emoji</option>
    <option value="morse" selected="@IsSelected("morse")">Morse</option>
</select>

@code {
    private async Task OnLanguageChange(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString() ?? "nl";

        if (selected == "braille")
        {
            SetAllLocalizer(LanguageMode.Braille);
        }
        else if (selected == "emoji")
        {
            SetAllLocalizer(LanguageMode.Emoji);
        }
        else if (selected == "morse")
        {
            SetAllLocalizer(LanguageMode.Morse);
        }
        else
        {
            // Normal culture change: set cookie and reload page
            SetAllLocalizer(LanguageMode.CultureBased);

            // Save to cookie (server culture)
            var cookieValue = $".AspNetCore.Culture=c={selected}|uic={selected}";
            await JS.InvokeVoidAsync("eval", $"document.cookie = '{cookieValue}; path=/'");

        }

        // Reload page to apply culture
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        StateHasChanged();
    }

    private string? IsSelected(string culture)
    {
        if (culture == "braille" && Selector.CurrentMode == LanguageMode.Braille) return "selected";
        if (culture == "emoji" && Selector.CurrentMode == LanguageMode.Emoji) return "selected";
        if (culture == "morse" && Selector.CurrentMode == LanguageMode.Morse) return "selected";

        var currentCulture = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;
        return currentCulture == culture ? "selected" : null;
    }

    private async void SetAllLocalizer(LanguageMode mode)
    {
        if (mode != LanguageMode.CultureBased)
        {
            var cookieValue = $".AspNetCore.Culture=c=nl|uic=nl";
            await JS.InvokeVoidAsync("eval", $"document.cookie = '{cookieValue}; path=/'");
        }
        LineChart.SetMode(mode);
        BarChart.SetMode(mode);
        Selector.SetMode(mode);
        About.SetMode(mode);
        AiPrediction.SetMode(mode);
    }
}
