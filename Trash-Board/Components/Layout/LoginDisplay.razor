@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using TrashBoard.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject CustomLocalizer<TrashBoard.Login> L
@rendermode InteractiveServer
@inject NavigationManager Nav

@if (authState is null)
{
    <p>Loading...</p>
}
else if (authState.User.Identity?.IsAuthenticated == true)
{
    var user = authState.User;
    <span>@user.Identity?.Name</span>

    @if (user.IsInRole("Admin"))
    {
        <span class="badge bg-danger ms-2">@L["Role_Admin"]</span>
        <a class="btn btn-danger" href="/admin/admin">@L["Role_Admin"]</a>
    }
    else if (user.IsInRole("Viewer"))
    {
        <span class="badge bg-info ms-2">@L["Role_Viewer"]</span>
    }
    <form method="post" action="/logout-handler">
        <button class="btn btn-primary mt-2" type="submit">@L["Title_Logout"]</button>
    </form>
}
else
{
    <a class="btn btn-primary" href="/login">@L["Title_Login"]</a>
    @* <a class="btn btn-primary" href="/register">@L["Title_Register"]</a> *@
}

@code {
    private AuthenticationState? authState;

    protected override async Task OnInitializedAsync()
    {
        await L.InitializeAsync();
        authState = await AuthStateProvider.GetAuthenticationStateAsync();

    }
    private void Logout()
    {
        Nav.NavigateTo("/logout");
    }
}
