@using BlazorBootstrap
@using TrashBoard.Models
@using TrashBoard.Services
@inject CustomLocalizer<TrashBoard.TrashDetectionsLineChart> L
@rendermode InteractiveServer

@if (detections != null && detections.Any())
{
    <LineChart @ref="lineChart" Class="mb-4" />
}
else
{
    <p>No data to show.</p>
}

@code {
    [Parameter]
    public IEnumerable<TrashDetection>? TrashDetections { get; set; }

    private LineChart lineChart = default!;
    private List<TrashDetection> detections = new();

    private bool chartInitialized = false;
    private bool chartNeedsUpdate = false;

    protected override Task OnParametersSetAsync()
    {
        if (TrashDetections is not null && TrashDetections.Any())
        {
            detections = TrashDetections.ToList();
            chartNeedsUpdate = true;
        }

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (lineChart is null || !chartNeedsUpdate || detections.Count == 0)
            return;

        if (!chartInitialized)
        {
            await InitializeChartAsync();
            chartInitialized = true;
        }
        else
        {
            await UpdateChartAsync();
        }

        chartNeedsUpdate = false;
    }

    private async Task InitializeChartAsync()
    {
        var (data, options) = BuildChartDataAndOptions();
        await lineChart.InitializeAsync(data, options);
    }

    private async Task UpdateChartAsync()
    {
        var (data, options) = BuildChartDataAndOptions();
        await lineChart.UpdateAsync(data, options);
    }

    private (ChartData, LineChartOptions) BuildChartDataAndOptions()
    {
        int totalItems = detections.Count;

        TimeSpan bucketSize = totalItems switch
        {
            <= 20 => TimeSpan.FromMinutes(1),
            <= 50 => TimeSpan.FromMinutes(15),
            <= 100 => TimeSpan.FromHours(1),
            <= 200 => TimeSpan.FromHours(6),
            <= 400 => TimeSpan.FromHours(12),
            <= 700 => TimeSpan.FromDays(1),
            <= 1000 => TimeSpan.FromDays(2),
            <= 1500 => TimeSpan.FromDays(3),
            _ => TimeSpan.FromDays(7)
        };
        // TimeSpan bucketSize = TimeSpan.FromMinutes(1);
        bool smallBuckets = bucketSize < TimeSpan.FromDays(1);

        // Define bucket start reference time:
        DateTime minTimestamp = detections.Min(d => d.Timestamp);
        DateTime bucketStartReference;

        if (smallBuckets||true)
        {
            // Use midnight of the earliest date for daily aligned buckets
            bucketStartReference = minTimestamp.Date;
        }
        else
        {
            // Use the earliest timestamp (can be arbitrary)
            bucketStartReference = minTimestamp;
        }

        // Group detections by bucket start time
        var grouped = detections
            .GroupBy(d =>
            {
                // Calculate how many full buckets elapsed since bucketStartReference
                var elapsedTicks = d.Timestamp.Ticks - bucketStartReference.Ticks;
                var bucketIndex = elapsedTicks / bucketSize.Ticks;
                return bucketStartReference.AddTicks(bucketIndex * bucketSize.Ticks);
            })
            .OrderBy(g => g.Key)
            .ToList();

        // Build label dictionary by date to count buckets per day (only if smallBuckets)
        Dictionary<DateTime, int> bucketsPerDay = new();
        if (smallBuckets)
        {
            foreach (var group in grouped)
            {
                var day = group.Key.Date;
                if (!bucketsPerDay.ContainsKey(day))
                    bucketsPerDay[day] = 0;
                bucketsPerDay[day]++;
            }
        }

        List<string> labels = new();
        foreach (var group in grouped)
        {
            if (smallBuckets)
            {
                // For small buckets, always show date and time
                labels.Add(group.Key.ToString("yyyy-MM-dd HH:mm"));
            }
            else
            {
                // For big buckets, always show date
                labels.Add(group.Key.ToString("yyyy-MM-dd"));
            }
        }

        var dataPoints = grouped.Select(g => (double?)g.Count()).ToList();

        var data = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset>
        {
            new LineChartDataset
            {
                Label = L["ChartLabel"],
                Data = dataPoints,
                BackgroundColor = "rgba(54, 162, 235, 0.2)",
                BorderColor = "rgba(54, 162, 235, 1)",
                BorderWidth = 2,
                PointBackgroundColor = new() { "rgba(54, 162, 235, 1)" },
                PointBorderColor = new() { "rgba(54, 162, 235, 1)" }
            }
        }
            };

        var options = new LineChartOptions
            {
                Responsive = true,
                Plugins = new LineChartPlugins
                {
                    Title = new ChartPluginsTitle
                    {
                        Display = true,
                        Text = L["ChartTitle"],
                        Font = new ChartFont { Size = 18 }
                    }
                },
                Scales = new Scales
                {
                    X = new ChartAxes
                    {
                        Title = new ChartAxesTitle
                        {
                            Display = true,
                            Text = string.Format(L["XAxisTitleTemplate"], FormatBucketSize(bucketSize))
                        }
                    },
                    Y = new ChartAxes
                    {
                        Title = new ChartAxesTitle
                        {
                            Display = true,
                            Text = L["YAxisTitle"]
                        },
                        BeginAtZero = true
                    }
                }
            };

        return (data, options);
    }

    private static string FormatBucketSize(TimeSpan bucketSize)
    {
        if (bucketSize.TotalDays >= 1)
            return $"{bucketSize.TotalDays:N0} day{(bucketSize.TotalDays > 1 ? "s" : "")}";
        if (bucketSize.TotalHours >= 1)
            return $"{bucketSize.TotalHours:N0} hour{(bucketSize.TotalHours > 1 ? "s" : "")}";
        if (bucketSize.TotalMinutes >= 1)
            return $"{bucketSize.TotalMinutes:N0} minute{(bucketSize.TotalMinutes > 1 ? "s" : "")}";
        return $"{bucketSize.TotalSeconds:N0} second{(bucketSize.TotalSeconds > 1 ? "s" : "")}";
    }

}
