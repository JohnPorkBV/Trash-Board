@using BlazorBootstrap
@using TrashBoard.Models
@using TrashBoard.Services
@rendermode InteractiveServer

@inject CustomLocalizer<TrashBoard.TrashForecastBarChart> L

@if (TrashData is not null && TrashData.Count > 0)
{
    <div class="@Class">
        <BarChart @ref="barChart" Class="mb-4" />
    </div>
}
else
{
    <p>@L["NoData"]</p>
}

@code {
    [Parameter]
    public Dictionary<string, double>? TrashData { get; set; }

    [Parameter]
    public double? TotalCount { get; set; }

    [Parameter]
    public string? Class { get; set; }

    private BarChart barChart = default!;
    private bool chartInitialized = false;
    private bool chartNeedsUpdate = false;

    protected override Task OnParametersSetAsync()
    {
        chartNeedsUpdate = true;
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (barChart is null || !chartNeedsUpdate || TrashData is null || TrashData.Count == 0)
            return;

        if (!chartInitialized)
        {
            await InitializeBarChartAsync();
            chartInitialized = true;
        }
        else
        {
            await UpdateBarChartAsync();
        }

        chartNeedsUpdate = false;
    }

    private async Task InitializeBarChartAsync()
    {
        var (data, options) = BuildChartDataAndOptions();
        await barChart.InitializeAsync(data, options);
    }

    private async Task UpdateBarChartAsync()
    {
        var (data, options) = BuildChartDataAndOptions();
        await barChart.UpdateAsync(data, options);
    }

    private (ChartData, BarChartOptions) BuildChartDataAndOptions()
    {
        var labels = new List<string>();
        var values = new List<double?>();

        foreach (var kvp in TrashData!)
        {
            double value = kvp.Value;
            string label = kvp.Key;

            if (TotalCount.HasValue && TotalCount.Value > 0)
            {
                double percentage = value / TotalCount.Value * 100;
                label += $" ({percentage:F1}%)";
            }

            labels.Add(label);
            values.Add(value);
        }

        var dataset = new BarChartDataset
            {
                Label = L["DatasetLabel"], // e.g. "Predicted Trash Types"
                Data = values,
                BackgroundColor = labels.Select(_ => GetRandomColor()).ToList(),
                BorderColor = labels.Select(_ => "rgba(0,0,0,0.1)").ToList()
            };

        var data = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset> { dataset }
            };

        var options = new BarChartOptions
            {
                Responsive = true,
                Plugins = new BarChartPlugins
                {
                    Title = new ChartPluginsTitle
                    {
                        Display = true,
                        Text = L["ChartTitle"],
                        Font = new ChartFont { Size = 18 }
                    }
                },
                Scales = new Scales
                {
                    Y = new ChartAxes
                    {
                        BeginAtZero = true,
                        Title = new ChartAxesTitle
                        {
                            Display = true,
                            Text = L["YAxisTitle"]
                        }
                    },
                    X = new ChartAxes
                    {
                        Title = new ChartAxesTitle
                        {
                            Display = true,
                            Text = L["XAxisTitle"]
                        }
                    }
                }
            };

        return (data, options);
    }

    private static string GetRandomColor()
    {
        var rnd = new Random();
        return $"rgba({rnd.Next(80, 200)}, {rnd.Next(80, 200)}, {rnd.Next(80, 200)}, 0.7)";
    }
}
