@page "/admin/events"
@inject TrashboardDbContext Db
@using Microsoft.EntityFrameworkCore
@using TrashBoard.Data
@using TrashBoard.Models
@using TrashBoard.Services
@inject UserSessionService SessionService
@inject ITrashDataService TrashDataService
@rendermode InteractiveServer


@if (SessionService.IsAdmin)
{
	<h3>Breda Events</h3>

	@if (events == null)
	{
		<p>Loading...</p>
	}
	else
	{
		<h5>Import Events from CSV</h5>
		<InputFile OnChange="HandleFileSelected" accept=".csv" />
		@if (importError != null)
		{
			<p class="text-danger">@importError</p>
		}
		<EditForm Model="newEvent" OnValidSubmit="AddEvent" FormName="EventAdd">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="mb-3">
				<label>Start Date:</label>
				<InputDate @bind-Value="newEvent.StartDate" class="form-control" />
			</div>

			<div class="mb-3">
				<label>End Date (optional):</label>
				<InputDate @bind-Value="newEvent.EndDate" class="form-control" />
			</div>

			<div class="mb-3">
				<label>Name:</label>
				<InputText @bind-Value="newEvent.Name" class="form-control" />
			</div>

			<div class="mb-3">
				<label>Location:</label>
				<InputText @bind-Value="newEvent.Location" class="form-control" />
			</div>

			<div class="mb-3">
				<label>Description:</label>
				<InputText @bind-Value="newEvent.Description" class="form-control" />
			</div>

			<button type="submit" class="btn btn-primary">Add Event</button>
		</EditForm>

		<hr />

		<table class="table">
			<thead>
				<tr>
					<th>Start</th>
					<th>End</th>
					<th>Name</th>
					<th>Location</th>
					<th>Description</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var ev in events)
				{
					<tr>
						<td>@ev.StartDate.ToShortDateString()</td>
						<td>@(ev.EndDate?.ToShortDateString() ?? "-")</td>
						<td>@ev.Name</td>
						<td>@ev.Location</td>
						<td>@ev.Description</td>
						<td>
							<button class="btn btn-danger btn-sm" @onclick="@(() => DeleteEvent(ev.Id))">Delete</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
		<h3 class="text-xl font-bold mb-4">Update Trash Records with Event Info</h3>

		<button class="btn btn-primary mb-4" @onclick="StartUpdate" disabled="@IsRunning">
			@if (IsRunning)
			{
				<span>Updating... Please wait</span>
			}
			else
			{
				<span>Start Breda Event Update</span>
			}
		</button>

		@if (IsRunning)
		{
			<p class="text-warning">Updating... (@ProgressCount / @TotalCount)</p>
		}

		@if (UpdatedItems?.Count > 0)
		{
			<h4 class="text-lg mt-4">Updated Records</h4>
			<table class="table table-striped table-sm">
				<thead>
					<tr>
						<th>ID</th>
						<th>Timestamp</th>
						<th>Detected Object</th>
						<th>Breda Event</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in UpdatedItems)
					{
						<tr>
							<td>@item.Id</td>
							<td>@item.Timestamp</td>
							<td>@item.DetectedObject</td>
							<td>@(item.IsBredaEvent ? item.BredaEventName : "-")</td>
						</tr>
					}
				</tbody>
			</table>
		}
	}
}
else
{
	<p>Access denied.</p>
}

@code {
	private List<BredaEvent>? events;
	private BredaEvent newEvent = new();
	private bool IsRunning = false;
	private int ProgressCount = 0;
	private int TotalCount = 0;
	private List<TrashDetection> UpdatedItems = new();

	protected override async Task OnInitializedAsync()
	{
		await LoadEvents();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await SessionService.InitializeAsync();
			StateHasChanged(); // refresh UI after loading session data
		}
	}

	private async Task StartUpdate()
	{
		IsRunning = true;
		UpdatedItems.Clear();
		ProgressCount = 0;

		var all = (await TrashDataService.GetAllAsync()).ToList();
		TotalCount = all.Count;

		foreach (var item in all)
		{
			var updated = await TrashDataService.UpdateBredaEventInfoForAsync(item);
			UpdatedItems.Add(updated);
			ProgressCount++;
			StateHasChanged(); // force UI update
			//await Task.Delay(50); // optional: simulate responsiveness
		}

		IsRunning = false;
	}

	private async Task LoadEvents()
	{
		events = await Db.BredaEvents.OrderBy(e => e.StartDate).ToListAsync();
	}

	private async Task AddEvent()
	{
		try
		{
			Db.BredaEvents.Add(newEvent);
			await Db.SaveChangesAsync();
			newEvent = new();
			await LoadEvents();
		}
		catch (Exception ex)
		{
			Console.WriteLine("Error adding event: " + ex.Message);
		}
	}

	private async Task DeleteEvent(int id)
	{
		var ev = await Db.BredaEvents.FindAsync(id);
		if (ev != null)
		{
			Db.BredaEvents.Remove(ev);
			await Db.SaveChangesAsync();
			await LoadEvents();
		}
	}

	private string? importError;

	private async Task HandleFileSelected(InputFileChangeEventArgs e)
	{
		var file = e.File;
		using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB max
		using var reader = new StreamReader(stream);

		bool isFirstLine = true;
		string? line;

		while ((line = await reader.ReadLineAsync()) != null)
		{
			if (isFirstLine)
			{
				isFirstLine = false;
				continue; // Skip header
			}

			if (string.IsNullOrWhiteSpace(line))
				continue;

			try
			{
				var parts = CSVParser.ParseCsvLine(line);
				var (start, end) = CSVParser.ParseDutchDateRange(parts[0].Trim());

				var newEvent = new BredaEvent
					{
						Name = parts[1],
						Location = parts[2],
						Description = parts[3],
						StartDate = start,
						EndDate = end
					};

				Db.BredaEvents.Add(newEvent);
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error importing line: {line} - {ex.Message}");
			}
		}

		await Db.SaveChangesAsync();
		await LoadEvents();
		StateHasChanged(); // force UI update

	}


}
