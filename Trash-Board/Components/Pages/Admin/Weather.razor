@attribute [Authorize(Roles = "Admin")]
@page "/admin/weather"
@using Microsoft.AspNetCore.Authorization
@using TrashBoard.Services
@inject ITrashDataService TrashDataService
@rendermode InteractiveServer
<h3>Weather Data Update</h3>

@if (!isRunning)
{
    <button class="btn btn-primary" @onclick="StartUpdate">Start Weather Update</button>
}
else
{
    <p><strong>Updating weather data...</strong></p>
    <div class="progress mb-2">
        <div class="progress-bar" role="progressbar" style="width:@progress%" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100">
            @progress%
        </div>
    </div>
}

<ul class="list-unstyled">
    @foreach (var line in logLines)
    {
        <li>@line</li>
    }
</ul>

<style>

    h1, h2, h3, h4, h5, h6 {
        color: #006400;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-weight: 600;
        margin-top: 1rem;
        margin-bottom: 0.5rem;
    }

        .btn-primary,
        .btn-warning {
            background-color: #006400 !important;
            border-color: #006400 !important;
            color: white !important;
        }


            .btn-primary:hover,
            .btn-warning:hover {
                background-color: #228B22 !important;
                border-color: #228B22 !important;
                color: white !important;
            }

            .btn-primary:focus,
            .btn-warning:focus,
            .btn:focus-visible,
            .btn-primary:focus-visible,
            .btn-warning:focus-visible {
                outline: none !important;
                border-color: #006400 !important;
                box-shadow: 0 0 0 0.25rem rgba(0, 100, 0, 0.5) !important;
            }

    input:focus,
    textarea:focus,
    select:focus {
        outline: none;
        border-color: #006400 !important;
        box-shadow: 0 0 0 0.2rem rgba(0, 100, 0, 0.25) !important;
    }
</style>

@code {
    private List<string> logLines = new();
    private bool isRunning = false;
    private int progress = 0;

    private async Task StartUpdate()
    {
        isRunning = true;
        logLines.Clear();
        progress = 0;
        StateHasChanged();

        var count = 0;

        await foreach (var log in TrashDataService.UpdateAllWeatherInfoWithProgressAsync())
        {
            logLines.Add(log);
            count++;

            progress = Math.Min(100, count * 100 / (await TrashDataService.GetCount() / 25));
            StateHasChanged();
        }

        isRunning = false;
        progress = 100;
        StateHasChanged();
    }
}
