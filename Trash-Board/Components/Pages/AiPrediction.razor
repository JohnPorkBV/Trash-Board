@attribute [Authorize]
@page "/ai-predict"
@using BlazorBootstrap
@using Microsoft.AspNetCore.Authorization
@using TrashBoard.Models
@using TrashBoard.Services
@inject IAiPredictionService AiService
@inject IWeatherService WeatherService
@inject CustomLocalizer<TrashBoard.AiPrediction> L
@rendermode InteractiveServer

<h3>@L["Title"]</h3>

<div class="form-group">
    <label>@L["Table_Humidity"]</label>
    <input type="number" @bind="input.Humidity" class="form-control" />
</div>
<div class="form-group">
    <label>@L["Table_Precipitation"]</label>
    <input type="number" step="0.1" @bind="input.Precipitation" class="form-control" />
</div>
<div class="form-group">
    <label>@L["Table_Temperature"]</label>
    <input type="number" step="0.1" @bind="input.Temp" class="form-control" />
</div>
<div class="form-group">
    <label>@L["Table_Windforce"]</label>
    <input type="number" step="0.1" @bind="input.Windforce" class="form-control" />
</div>
<div class="form-group form-check">
    <input type="checkbox" @bind="input.IsHoliday" class="form-check-input" />
    <label class="form-check-label">@L["Table_IsHoliday"]</label>
</div>
<div class="form-group form-check">
    <input type="checkbox" @bind="input.isBredaEvent" class="form-check-input" />
    <label class="form-check-label">@L["Table_IsBredaEvent"]</label>
</div>

<button class="btn btn-primary mt-2" @onclick="HandleSubmit">@L["Label_Predict"]</button>

	@if (result is not null)
{
    <div class="alert alert-info mt-3">
        <strong>@L["Label_Prediction"]:</strong> @result
    </div>
}
<hr />
<div class="mb-3">
    <label>@L["Label_Date"]</label>
    <DateInput @bind-Value="input.Date" />
    <button class="btn btn-primary mt-2" @onclick="RefreshWeather">@L["Label_Refresh"]</button>

</div>


<button class="btn btn-warning mt-2" @onclick="PredictTomorrow">@L["Label_Prediction_Detail"]</button>

@if (forecastResults is not null)
{
    <div class="alert alert-warning mt-3">
        <h5>@L["Label_Prediction_For"] @forecastResults.Date?.ToShortDateString()</h5>
        <p><strong>@L["Label_Total"]</strong> @forecastResults.TotalCount</p>
        <ul>
            @foreach (var kvp in forecastResults.Trash)
            {
                <li><strong>@kvp.Key:</strong> @kvp.Value</li>
            }
        </ul>
    </div>
}

<style>
    h1, h2, h3, h4, h5, h6 {
        color: #006400; /* Donkergroen */
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-weight: 600;
        margin-top: 1rem;
        margin-bottom: 0.5rem;
    }

    .btn-primary,
    .btn-warning {
        background-color: #006400 !important; /* Donkergroen */
        border-color: #006400 !important;
        color: white !important;
    }

        .btn-primary:hover,
        .btn-warning:hover {
            background-color: #228B22 !important; /* Iets lichter groen bij hover */
            border-color: #228B22 !important;
            color: white !important;
        }

    input:focus,
    textarea:focus,
    select:focus {
        outline: none; /* Verwijdert de standaard blauwe outline */
        border-color: #006400 !important; /* Donkergroen */
        box-shadow: 0 0 0 0.2rem rgba(0, 100, 0, 0.25) !important; /* lichte groene glow */
    }

    /* Donkergroene knoppen */
    
    .btn-primary,
    .btn-warning {
        background-color: #006400 !important; /* Donkergroen */
        border-color: #006400 !important;
        color: white !important;
    }

        
        .btn-primary:hover,
        .btn-warning:hover {
            background-color: #228B22 !important; /* Iets lichter groen bij hover */
            border-color: #228B22 !important;
            color: white !important;
        }

        /* Donkergroene focusstijl voor knoppen */
        
        .btn-primary:focus,
        .btn-warning:focus,
        .btn:focus-visible,
        .btn-primary:focus-visible,
        .btn-warning:focus-visible {
            outline: none !important;
            border-color: #006400 !important;
            box-shadow: 0 0 0 0.25rem rgba(0, 100, 0, 0.5) !important; /* Donkergroene glow */
        }

    /* Pas alert-warning aan naar lichtgroen */
    .alert.alert-warning {
        background-color: #dfffe0 !important; /* Lichtgroen */
        border-color: #b2e2b5 !important; /* Bijpassende borderkleur */
        color: #004d00 !important; /* Donkergroene tekstkleur */
    }

    /* Maak alert-info groen */
    .alert.alert-info {
        background-color: #dfffe0 !important; /* Lichtgroen achtergrond */
        border-color: #b2e2b5 !important; /* Groenige rand */
        color: #004d00 !important; /* Donkergroene tekst */
    }



	</style>


@code {
    private PredictionAmountResult? forecastResults;
    private TrashDetectionInput input = new();

    private string? result;
    protected override async Task OnInitializedAsync()
    {
        input.Date = DateTime.Today; // Zet standaard op vandaag
        await L.InitializeAsync();
    }
    private async Task HandleSubmit()
    {
        result = await AiService.PredictAsync(input);
        StateHasChanged();
    }


    private async Task RefreshWeather()
    {
        try
        {
            // Get weather data for the input date
            WeatherData? weatherData = await WeatherService.GetWeatherForTimestampAsync(input.Date);

            if (weatherData != null)
            {
                // Populate the input fields with weather values
                input.Temp = weatherData.Temp;
                input.Humidity = weatherData.Humidity;
                input.Precipitation = weatherData.Precipitation;
                input.Windforce = weatherData.Windforce;
            }
            else
            {
                Console.WriteLine("No weather data found for the selected date.");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting forecast: " + ex.Message);
        }
    }
    private async Task PredictTomorrow()
    {
        try
        {
            // Get weather data for the input date
            WeatherData? weatherData = await WeatherService.GetWeatherForTimestampAsync(input.Date);

            if (weatherData != null)
            {
                // Populate the input fields with weather values
                input.Temp = weatherData.Temp;
                input.Humidity = weatherData.Humidity;
                input.Precipitation = weatherData.Precipitation;
                input.Windforce = weatherData.Windforce;
            }
            else
            {
                Console.WriteLine("No weather data found for the selected date.");
            }

            // Call the AI prediction
            forecastResults = await AiService.GetForecastOfDayAsync(input);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting forecast: " + ex.Message);
        }
    }




}
