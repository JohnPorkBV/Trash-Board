@page "/ai-predict"
@using BlazorBootstrap
@using TrashBoard.Models
@using TrashBoard.Services
@inject IAiPredictionService AiService
@inject IWeatherService WeatherService
@inject UserSessionService SessionService
@rendermode InteractiveServer
@if (!String.IsNullOrEmpty(SessionService.Username))
{
	<h3>AI Prediction</h3>

	<div class="form-group">
		<label>Humidity</label>
		<input type="number" @bind="input.Humidity" class="form-control" />
	</div>
	<div class="form-group">
		<label>Precipitation</label>
		<input type="number" step="0.1" @bind="input.Precipitation" class="form-control" />
	</div>
	<div class="form-group">
		<label>Temperature</label>
		<input type="number" step="0.1" @bind="input.Temp" class="form-control" />
	</div>
	<div class="form-group">
		<label>Windforce</label>
		<input type="number" step="0.1" @bind="input.Windforce" class="form-control" />
	</div>
	<div class="form-group form-check">
		<input type="checkbox" @bind="input.IsHoliday" class="form-check-input" />
		<label class="form-check-label">Is Holiday?</label>
	</div>
	<div class="form-group form-check">
		<input type="checkbox" @bind="input.isBredaEvent" class="form-check-input" />
		<label class="form-check-label">Is BredaEvent?</label>
	</div>

	<button class="btn btn-primary mt-2" @onclick="HandleSubmit">Predict</button>

	@if (result is not null)
	{
		<div class="alert alert-info mt-3">
			<strong>Prediction:</strong> @result
		</div>
	}
	<hr />
	<div class="mb-3">
		<label>Datum</label>
		<DateInput @bind-Value="input.Date" />
		<button class="btn btn-primary mt-2" @onclick="RefreshWeather">Refresh Weather</button>

	</div>


	<button class="btn btn-warning mt-2" @onclick="PredictTomorrow">Voorspel (Gedetailleerd)</button>

	@if (forecastResults is not null)
	{
		<div class="alert alert-warning mt-3">
			<h5>Voorspelling voor @forecastResults.Date?.ToShortDateString()</h5>
			<p><strong>Totaal:</strong> @forecastResults.TotalCount</p>
			<ul>
				@foreach (var kvp in forecastResults.Trash)
				{
					<li><strong>@kvp.Key:</strong> @kvp.Value</li>
				}
			</ul>
		</div>
	}

}

@code {
	private TrashDetectionInput input = new();

	private string? result;

	private async Task HandleSubmit()
	{

		result = await AiService.PredictAsync(input);
		StateHasChanged();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await SessionService.InitializeAsync();
			StateHasChanged(); // refresh UI after loading session data
		}
	}
	private PredictionAmountResult? forecastResults;

	private async Task RefreshWeather()
	{
		try
		{
			// Get weather data for the input date
			WeatherData? weatherData = await WeatherService.GetWeatherForTimestampAsync(input.Date);

			if (weatherData != null)
			{
				// Populate the input fields with weather values
				input.Temp = weatherData.Temp;
				input.Humidity = weatherData.Humidity;
				input.Precipitation = weatherData.Precipitation;
				input.Windforce = weatherData.Windforce;
			}
			else
			{
				Console.WriteLine("No weather data found for the selected date.");
			}
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine("Error getting forecast: " + ex.Message);
		}
	}
	private async Task PredictTomorrow()
	{
		try
		{
			// Get weather data for the input date
			WeatherData? weatherData = await WeatherService.GetWeatherForTimestampAsync(input.Date);

			if (weatherData != null)
			{
				// Populate the input fields with weather values
				input.Temp = weatherData.Temp;
				input.Humidity = weatherData.Humidity;
				input.Precipitation = weatherData.Precipitation;
				input.Windforce = weatherData.Windforce;
			}
			else
			{
				Console.WriteLine("No weather data found for the selected date.");
			}

			// Call the AI prediction
			forecastResults = await AiService.GetForecastOfDayAsync(input);
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine("Error getting forecast: " + ex.Message);
		}
	}


	

}
