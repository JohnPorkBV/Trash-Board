@page "/ai-predict"
@using TrashBoard.Models
@using TrashBoard.Services
@inject AiPredictionService AiService
@inject UserSessionService SessionService
@rendermode InteractiveServer
@if (!String.IsNullOrEmpty(SessionService.Username))
{
	<h3>AI Prediction</h3>

	<div class="form-group">
		<label>Humidity</label>
		<input type="number" @bind="input.Humidity" class="form-control" />
	</div>
	<div class="form-group">
		<label>Precipitation</label>
		<input type="number" step="0.1" @bind="input.Precipitation" class="form-control" />
	</div>
	<div class="form-group">
		<label>Temperature</label>
		<input type="number" step="0.1" @bind="input.Temp" class="form-control" />
	</div>
	<div class="form-group">
		<label>Windforce</label>
		<input type="number" step="0.1" @bind="input.Windforce" class="form-control" />
	</div>
	<div class="form-group form-check">
		<input type="checkbox" @bind="input.IsHoliday" class="form-check-input" />
		<label class="form-check-label">Is Holiday?</label>
	</div>
	<div class="form-group form-check">
		<input type="checkbox" @bind="input.isBredaEvent" class="form-check-input" />
		<label class="form-check-label">Is BredaEvent?</label>
	</div>

	<button class="btn btn-primary mt-2" @onclick="HandleSubmit">Predict</button>

	@if (result is not null)
	{
		<div class="alert alert-info mt-3">
			<strong>Prediction:</strong> @result
		</div>
	}
}

@code {
	private TrashDetectionInput input = new();

	private string? result;

	private async Task HandleSubmit()
	{

		result = await AiService.PredictAsync(input);
		StateHasChanged();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await SessionService.InitializeAsync();
			StateHasChanged(); // refresh UI after loading session data
		}
	}
}
