@page "/selector"
@inject TrashBoard.Services.ITrashDataService TrashDataService
@using TrashBoard.Models
@rendermode InteractiveServer

<h3>Filter Trash Detections</h3>

<div style="display: flex; flex-direction: column; gap: 1rem; max-width: 300px;">
    <div style="display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 1rem;">
        <button @onclick="() => ApplyQuickFilter(0)">Today</button>
        <button @onclick="() => ApplyQuickFilter(1)">Yesterday</button>
        <button @onclick="() => ApplyQuickFilter(7)">Last 7 Days</button>
        <button @onclick="() => ApplyQuickFilter(14)">Last 14 Days</button>
        <button @onclick="() => ApplyQuickFilter(30)">Last 30 Days</button>
    </div>
    <div>
        <label>From Date:</label>
        <input type="date" @bind="fromDate" />
        <input type="time" @bind="fromTime" />
    </div>
    <div>
        <label>To Date:</label>
        <input type="date" @bind="toDate" />
        <input type="time" @bind="toTime" />
    </div>
    <div>
        <label>Select Trash Types:</label>
        <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
            @foreach (var type in trashTypes)
            {
                <label>
                    <input type="checkbox" @onchange="e => ToggleTrashType(type, e.Value is true)" />
                    @type
                </label>
            }
        </div>
    </div>
    <button type="button" @onclick="ApplyFilter">Apply Filter</button>
</div>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;"><strong>@errorMessage</strong></p>
}

@if (results != null && results.Any())
{
    <h4>Filtered Results</h4>
    <TrashBoard.Components.Charts.TrashChart TrashDetections="results" />
    <TrashBoard.Components.Charts.TrashTypeBarChart TrashDetections="results" />
    <table class="table">
        <thead>
            <tr>
                <th>Timestamp</th>
                <th>Detected Object</th>
                <th>Confidence Score</th>
                <th>Temperature</th>
                <th>Humidity</th>
                <th>Precipitation</th>
                <th>Windforce</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in results)
            {
                <tr>
                    <td>@item.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@item.DetectedObject</td>
                    <td>@item.ConfidenceScore</td>
                    <td>@item.Temp</td>
                    <td>@item.Humidity</td>
                    <td>@item.Precipitation</td>
                    <td>@item.Windforce</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (results != null && !results.Any())
{
    <p><em>No detections found in the selected range.</em></p>
}

@code {
    private DateTime? fromDate;
    private TimeOnly? fromTime;
    private DateTime? toDate;
    private TimeOnly? toTime;
    private string? errorMessage;
    private List<string> trashTypes = new(); // from DB
    private HashSet<string> selectedTrashTypes = new(); // for multi-select

    private IEnumerable<TrashDetection>? results;

    private async Task ApplyFilter()
    {
        errorMessage = null;
        DateTime? from = null;
        DateTime? to = null;

        if (fromDate.HasValue)
        {
            var time = fromTime ?? TimeOnly.MinValue;
            from = fromDate.Value.Date + time.ToTimeSpan();
        }

        if (toDate.HasValue)
        {
            var time = toTime ?? new TimeOnly(23, 59, 59);
            to = toDate.Value.Date + time.ToTimeSpan();
        }

        if (from.HasValue && to.HasValue && from.Value == to.Value)
        {
            errorMessage = "From and To date/time cannot be the same.";
            results = null;
            return;
        }

        try
        {
            results = await TrashDataService.GetFilteredAsync(from, to, selectedTrashTypes.ToList());
        }
        catch (Exception ex)
        {
            errorMessage = $"Error during filter: {ex.Message}";
        }
    }


    private async Task ApplyQuickFilter(int daysBack)
    {
        errorMessage = null;
        try
        {
            DateTime now = DateTime.Now;
            DateTime from;
            DateTime to;

            if (daysBack == 0) // Today
            {
                from = now.Date;
                to = now;
            }
            else if (daysBack == 1) // Yesterday
            {
                from = now.Date.AddDays(-1);
                to = now.Date.AddTicks(-1);
            }
            else
            {
                from = now.Date.AddDays(-daysBack);
                to = now;
            }

            // Update UI fields
            fromDate = from.Date;
            fromTime = TimeOnly.FromDateTime(from);
            toDate = to.Date;
            toTime = TimeOnly.FromDateTime(to);

            results = (await TrashDataService.GetFilteredAsync(from, to, selectedTrashTypes.ToList()))
                .OrderByDescending(r => r.Timestamp);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error applying quick filter: {ex.Message}";
        }
    }


    protected override async Task OnInitializedAsync()
    {
        trashTypes = (await TrashDataService.GetAvailableTrashTypesAsync()).ToList();
    }

    private void ToggleTrashType(string type, bool isSelected)
    {
        if (isSelected)
            selectedTrashTypes.Add(type);
        else
            selectedTrashTypes.Remove(type);
    }
}