@page "/admin/holiday-updater"
@using TrashBoard.Models
@using TrashBoard.Services
@inject ITrashDataService TrashDataService
@rendermode InteractiveServer

@if (true)// Todo Add user roles
{
    <h3 class="text-xl font-bold mb-4">Update Trash Records with Holiday Info</h3>

    <button class="btn btn-primary mb-4" @onclick="StartUpdate" disabled="@IsRunning">
        @if (IsRunning)
        {
            <span>Updating... Please wait</span>
        }
        else
        {
            <span>Start Holiday Update</span>
        }
    </button>

    @if (IsRunning)
    {
        <p class="text-warning">Updating... (@ProgressCount / @TotalCount)</p>
    }

    @if (UpdatedItems?.Count > 0)
    {
        <h4 class="text-lg mt-4">Updated Records</h4>
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Timestamp</th>
                    <th>Detected Object</th>
                    <th>Holiday</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in UpdatedItems)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Timestamp</td>
                        <td>@item.DetectedObject</td>
                        <td>@(item.IsHoliday ? item.HolidayName : "-")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <p>Access denied.</p>
}


@code {
    private bool IsRunning = false;
    private int ProgressCount = 0;
    private int TotalCount = 0;
    private List<TrashDetection> UpdatedItems = new();

    private async Task StartUpdate()
    {
        IsRunning = true;
        UpdatedItems.Clear();
        ProgressCount = 0;

        var all = (await TrashDataService.GetAllAsync()).ToList();
        TotalCount = all.Count;

        foreach (var item in all)
        {
            var updated = await TrashDataService.UpdateHolidayInfoForAsync(item);
            UpdatedItems.Add(updated);
            ProgressCount++;
            StateHasChanged(); // force UI update
            //await Task.Delay(50); // optional: simulate responsiveness
        }

        IsRunning = false;
    }

}
